// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"

  runtime                = "workerd"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"

  output          = "../generated/prisma"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid()) // User ID (UUID-based)
  username    String      @unique
  createdAt   DateTime    @default(now())

  credentials Credential[] // Relationship: One user can have many credentials
  hikes       Hike[]        // Relationship: One user can have many hikes
}

model Credential {
  id            String   @id @default(uuid()) // Internal DB ID
  userId        String   @unique // Every credential is linked to a specific user
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  credentialId  String   @unique // WebAuthn credential identifier
  publicKey     Bytes
  counter       Int      @default(0)
  
  @@index([credentialId])
  @@index([userId])
}

model Hike {
  id            String   @id @default(uuid()) // Internal DB ID
  userId        String   @unique // Every hike is linked to a specific user
  user          User     @relation(fields: [userId], references: [id])
  trailId       String   @unique // Every hike is linked to a specific trail
  trail         Trail    @relation(fields: [trailId], references: [id])
  hikeDate      DateTime
  comments      String

  @@index([userId])
  @@index([trailId])
}

model Trail {
  id          String      @id @default(uuid()) // Trail ID (UUID-based)
  name        String
  address     String
  imageURL    String
  pdfURL      String
  videoURL    String
  dnrURL      String
  difficulty  Int
  length      Float?      // Trail length in miles (e.g., 2.5)
  proofCode   String?     // Code hidden on trail to verify hike completion
  notes       String
  latitude    Float?      // Latitude coordinate (decimal degrees)
  longitude   Float?      // Longitude coordinate (decimal degrees)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  deletedAt   DateTime?

  hikes       Hike[]        // Relationship: One trail can have many hikes
}